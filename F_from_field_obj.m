function F = F_from_field_obj(field_obj,x)
%F_FROM_FIELD_OBJ Returns the electromagnetic field F
%(containing both E- and B-fields) as a multivector generated by field
%object field_obj and evaluated at position x (a vector)
%   Capital letters indicate matrices.
epsilon_0 = 8.8541878128e-12;
mu_0 = 1.25663706212e-6;
switch field_obj.type
    case "charge"
        X = vector_to_multivector(x);
        Y = vector_to_multivector(field_obj.position);
        q = field_obj.charge;
        F = 1/(4*pi*sqrt(epsilon_0))*(X-Y)*q/((X-Y)^2).^(3/2);
    case "eDipole"
        D = vector_to_multivector(field_obj.dipolemoment);
        y = field_obj.position;
        R=vector_to_multivector(x-y);
        A=D*R+R*D;
        F=1/(4*pi*sqrt(epsilon_0))*(3/2*(R)*(A)/((R^2).^(5/2))-D/((R^2).^(3/2)));
    case "current"
        % First calculate where particle position is in xy-plane
        x(3) = 0; X = vector_to_multivector(x);
        Y = vector_to_multivector(field_obj.position);
        e3 = [1 0; 0 -1];
        i = field_obj.current;
        
        % Define the outer product for a vector u and vector v
        outer_product = @(u,v) 1/2*(u*v-v*u);

        F = sqrt(mu_0)*i/(2*pi)*outer_product(e3,X-Y)/(X-Y)^2;

        % If the current moves we get another contributing term
        R = Y - X;
        V_current = vector_to_multivector(field_obj.velocity);
        F = F + sqrt(epsilon_0)*(mu_0*i)/(4*pi) * (V_current * R + R * V_current)/R^2 * e3;
    case "mDipole"
        % Define inner product for vector v and trivector w (in matrix form)
        % using Riesz formulas
        inner_product = @(v,w) 1/2*(v*w + w*v);

        % Define outer product for vector v and bivector w (in matrix form)
        % using Riesz formulas
        outer_product = @(v,w) 1/2*(v*w + w*v);

        r = x - field_obj.position;
        R = vector_to_multivector(r);
        M = field_obj.dipolemoment;  % Magnetic dipole moment

        F = sqrt(mu_0)/(4*pi) * (3*inner_product(R, outer_product(R,M))/norm(r)^5 - M/norm(r)^3);
end
end

